/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package de.blichmann.idajava.natives;

public enum graph_notification_t {
  grcode_calculating_layout,
  grcode_layout_calculated,
  grcode_changed_graph,
  grcode_changed_current,
  grcode_clicked,
  grcode_dblclicked,
  grcode_creating_group,
  grcode_deleting_group,
  grcode_group_visibility,
  grcode_gotfocus,
  grcode_lostfocus,
  grcode_user_refresh,
  grcode_user_gentext,
  grcode_user_text,
  grcode_user_size,
  grcode_user_title,
  grcode_user_draw,
  grcode_user_hint,
  grcode_destroyed,
  grcode_create_graph_viewer(256),
  grcode_get_graph_viewer,
  grcode_get_viewer_graph,
  grcode_create_mutable_graph,
  grcode_set_viewer_graph,
  grcode_refresh_viewer,
  grcode_fit_window,
  grcode_get_curnode,
  grcode_center_on,
  grcode_set_gli,
  grcode_add_menu_item,
  grcode_del_menu_item,
  grcode_get_selection,
  grcode_del_custom_layout,
  grcode_set_custom_layout,
  grcode_set_graph_groups,
  grcode_clear,
  grcode_create_digraph_layout,
  grcode_create_tree_layout,
  grcode_create_circle_layout,
  grcode_get_node_representative,
  grcode_find_subgraph_node,
  grcode_create_group,
  grcode_get_custom_layout,
  grcode_get_graph_groups,
  grcode_empty,
  grcode_is_visible_node,
  grcode_delete_group,
  grcode_change_group_visibility,
  grcode_set_edge,
  grcode_node_qty,
  grcode_nrect,
  grcode_set_titlebar_height,
  grcode_create_user_graph_place,
  grcode_create_disasm_graph1,
  grcode_create_disasm_graph2;

  public final int swigValue() {
    return swigValue;
  }

  public static graph_notification_t swigToEnum(int swigValue) {
    graph_notification_t[] swigValues = graph_notification_t.class.getEnumConstants();
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (graph_notification_t swigEnum : swigValues)
      if (swigEnum.swigValue == swigValue)
        return swigEnum;
    throw new IllegalArgumentException("No enum " + graph_notification_t.class + " with value " + swigValue);
  }

  @SuppressWarnings("unused")
  private graph_notification_t() {
    this.swigValue = SwigNext.next++;
  }

  @SuppressWarnings("unused")
  private graph_notification_t(int swigValue) {
    this.swigValue = swigValue;
    SwigNext.next = swigValue+1;
  }

  @SuppressWarnings("unused")
  private graph_notification_t(graph_notification_t swigEnum) {
    this.swigValue = swigEnum.swigValue;
    SwigNext.next = this.swigValue+1;
  }

  private final int swigValue;

  private static class SwigNext {
    private static int next = 0;
  }
}

