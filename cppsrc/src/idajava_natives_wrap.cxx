/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#define SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global;
        if (jobj)
          jthis_ = ((weak_global_ || !mem_own) ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj));
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0) {
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon((void **) &jenv_, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread((void **) &jenv_, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.peek();
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */



#define USE_DANGEROUS_FUNCTIONS
#include <pro.h>
#include <ida.hpp>
#pragma warning(push)
// Disable warning about conversion between nodeidx_t and size_t in netnode.hpp
#pragma warning(disable: 4267)
#include <idp.hpp>
#pragma warning( pop )
#include <expr.hpp>
#include <bytes.hpp>
#include <loader.hpp>
#include <ints.hpp>
#include <kernwin.hpp>
#include <diskio.hpp>
#include <llong.hpp>
#include <fpro.h>
#include <help.h>
#include <ua.hpp>
#include <area.hpp>
#include <segment.hpp>
#include <nalt.hpp>
#include <auto.hpp>
#include <funcs.hpp>
#include <name.hpp>
#include <struct.hpp>
#include <idp.hpp>
#include <frame.hpp>
#include <fixup.hpp>
#include <offset.hpp>

// Windows specific includes, omit rarely used APIs
#define WIN32_LEAN_AND_MEAN
#include <windows.h>

#include "idajava_natives.h"


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif

typedef int (idaapi *enumerate_files_cb)(const char *file, void *ud);


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "idajava_natives_wrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_can_1place32_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  uint64 arg1 ;
  uint64 *argp1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(uint64 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64");
    return 0;
  }
  arg1 = *argp1; 
  result = (bool)can_place32(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_can_1place32_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  int64 arg1 ;
  int64 *argp1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(int64 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null int64");
    return 0;
  }
  arg1 = *argp1; 
  result = (bool)can_place32(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qexit(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  qexit(arg1);
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_test_1bit(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  uchar *arg1 = (uchar *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uchar **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)test_bit((unsigned char const *)arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_set_1bit(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  uchar *arg1 = (uchar *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uchar **)&jarg1; 
  arg2 = (size_t)jarg2; 
  set_bit(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_clear_1bit(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  uchar *arg1 = (uchar *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uchar **)&jarg1; 
  arg2 = (size_t)jarg2; 
  clear_bit(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_set_1all_1bits(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  uchar *arg1 = (uchar *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uchar **)&jarg1; 
  arg2 = (size_t)jarg2; 
  set_all_bits(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_clear_1all_1bits(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  uchar *arg1 = (uchar *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uchar **)&jarg1; 
  arg2 = (size_t)jarg2; 
  clear_all_bits(arg1,arg2);
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_overlap(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  uval_t arg1 ;
  asize_t arg2 ;
  uval_t arg3 ;
  asize_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uval_t)jarg1; 
  arg2 = (asize_t)jarg2; 
  arg3 = (uval_t)jarg3; 
  arg4 = (asize_t)jarg4; 
  result = (bool)interval::overlap(arg1,arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_includes(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  uval_t arg1 ;
  asize_t arg2 ;
  uval_t arg3 ;
  asize_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uval_t)jarg1; 
  arg2 = (asize_t)jarg2; 
  arg3 = (uval_t)jarg3; 
  arg4 = (asize_t)jarg4; 
  result = (bool)interval::includes(arg1,arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  uval_t arg1 ;
  asize_t arg2 ;
  uval_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uval_t)jarg1; 
  arg2 = (asize_t)jarg2; 
  arg3 = (uval_t)jarg3; 
  result = (bool)interval::contains(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_readbytes(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jint jarg3, jboolean jarg4) {
  jint jresult = 0 ;
  int arg1 ;
  uint32 *arg2 = (uint32 *) 0 ;
  int arg3 ;
  bool arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = *(uint32 **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)readbytes(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_writebytes(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jint jarg3, jboolean jarg4) {
  jint jresult = 0 ;
  int arg1 ;
  uint32 arg2 ;
  int arg3 ;
  bool arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)writebytes(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_read2bytes(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  int arg1 ;
  uint16 *arg2 = (uint16 *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = *(uint16 **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)read2bytes(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_swap32(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint32 arg1 ;
  uint32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint32)jarg1; 
  result = (uint32)swap32(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_swap16(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  ushort arg1 ;
  ushort result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ushort)jarg1; 
  result = (ushort)swap16(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_swap_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  swap_value(arg1,(void const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_reloc_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jboolean jarg4) {
  void *arg1 = (void *) 0 ;
  int arg2 ;
  adiff_t arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (adiff_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  reloc_value(arg1,arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_rotate_1left(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  uval_t arg1 ;
  int arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  uval_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uval_t)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (uval_t)rotate_left(arg1,arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qalloc_1or_1throw(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (void *)qalloc_or_throw(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qrealloc_1or_1throw(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (void *)qrealloc_or_throw(arg1,arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qstrlen_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = qstrlen((char const *)arg1);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qstrlen_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uchar *arg1 = (uchar *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uchar **)&jarg1; 
  result = qstrlen((unsigned char const *)arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qstrlen_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  wchar16_t *arg1 = (wchar16_t *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(wchar16_t **)&jarg1; 
  result = qstrlen((wchar16_t const *)arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qstrcmp_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)qstrcmp((char const *)arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qstrcmp_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  uchar *arg1 = (uchar *) 0 ;
  uchar *arg2 = (uchar *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uchar **)&jarg1; 
  arg2 = *(uchar **)&jarg2; 
  result = (int)qstrcmp((unsigned char const *)arg1,(unsigned char const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qstrcmp_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  wchar16_t *arg1 = (wchar16_t *) 0 ;
  wchar16_t *arg2 = (wchar16_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(wchar16_t **)&jarg1; 
  arg2 = *(wchar16_t **)&jarg2; 
  result = (int)qstrcmp((wchar16_t const *)arg1,(wchar16_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qstrstr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)qstrstr((char const *)arg1,(char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qstrstr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  uchar *arg1 = (uchar *) 0 ;
  uchar *arg2 = (uchar *) 0 ;
  uchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uchar **)&jarg1; 
  arg2 = *(uchar **)&jarg2; 
  result = (uchar *)qstrstr((unsigned char const *)arg1,(unsigned char const *)arg2);
  *(uchar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qstrchr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jchar jarg2) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (char)jarg2; 
  result = (char *)qstrchr((char const *)arg1,arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qstrchr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  uchar *arg1 = (uchar *) 0 ;
  uchar arg2 ;
  uchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uchar **)&jarg1; 
  arg2 = (uchar)jarg2; 
  result = (uchar *)qstrchr((unsigned char const *)arg1,arg2);
  *(uchar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qstrchr_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  wchar16_t *arg1 = (wchar16_t *) 0 ;
  wchar16_t arg2 ;
  wchar16_t *argp2 ;
  wchar16_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(wchar16_t **)&jarg1; 
  argp2 = *(wchar16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null wchar16_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (wchar16_t *)qstrchr((wchar16_t const *)arg1,arg2);
  *(wchar16_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qstrrchr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jchar jarg2) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (char)jarg2; 
  result = (char *)qstrrchr((char const *)arg1,arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qstrrchr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  uchar *arg1 = (uchar *) 0 ;
  uchar arg2 ;
  uchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uchar **)&jarg1; 
  arg2 = (uchar)jarg2; 
  result = (uchar *)qstrrchr((unsigned char const *)arg1,arg2);
  *(uchar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qstrrchr_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  wchar16_t *arg1 = (wchar16_t *) 0 ;
  wchar16_t arg2 ;
  wchar16_t *argp2 ;
  wchar16_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(wchar16_t **)&jarg1; 
  argp2 = *(wchar16_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null wchar16_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (wchar16_t *)qstrrchr((wchar16_t const *)arg1,arg2);
  *(wchar16_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_new_1bytevec_1t_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bytevec_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (bytevec_t *)new bytevec_t();
  *(bytevec_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_new_1bytevec_1t_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  bytevec_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bytevec_t *)new bytevec_t((void const *)arg1,arg2);
  *(bytevec_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_bytevec_1t_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  bytevec_t *arg1 = (bytevec_t *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  bytevec_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bytevec_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bytevec_t *) &(arg1)->append((void const *)arg2,arg3);
  *(bytevec_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_bytevec_1t_1inject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  bytevec_t *arg1 = (bytevec_t *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bytevec_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->inject(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_bytevec_1t_1test_1bit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  bytevec_t *arg1 = (bytevec_t *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bytevec_t **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)((bytevec_t const *)arg1)->test_bit(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_bytevec_1t_1set_1bit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bytevec_t *arg1 = (bytevec_t *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bytevec_t **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->set_bit(arg2);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_bytevec_1t_1clear_1bit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bytevec_t *arg1 = (bytevec_t *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bytevec_t **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->clear_bit(arg2);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_bytevec_1t_1set_1all_1bits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bytevec_t *arg1 = (bytevec_t *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bytevec_t **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->set_all_bits(arg2);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_bytevec_1t_1clear_1all_1bits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bytevec_t *arg1 = (bytevec_t *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bytevec_t **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->clear_all_bits(arg2);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_bytevec_1t_1set_1bits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  bytevec_t *arg1 = (bytevec_t *) 0 ;
  bytevec_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bytevec_t **)&jarg1; 
  arg2 = *(bytevec_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bytevec_t const & reference is null");
    return ;
  } 
  (arg1)->set_bits((bytevec_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_bytevec_1t_1clear_1bits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  bytevec_t *arg1 = (bytevec_t *) 0 ;
  bytevec_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bytevec_t **)&jarg1; 
  arg2 = *(bytevec_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bytevec_t const & reference is null");
    return ;
  } 
  (arg1)->clear_bits((bytevec_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_delete_1bytevec_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bytevec_t *arg1 = (bytevec_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bytevec_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_new_1reloc_1info_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  reloc_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (reloc_info_t *)new reloc_info_t();
  *(reloc_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_delete_1reloc_1info_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  reloc_info_t *arg1 = (reloc_info_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(reloc_info_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_relocate_1relobj(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  relobj_t *arg1 = (relobj_t *) 0 ;
  ea_t arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(relobj_t **)&jarg1; 
  arg2 = (ea_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)relocate_relobj(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_relobj_1t_1base_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  relobj_t *arg1 = (relobj_t *) 0 ;
  ea_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(relobj_t **)&jarg1; 
  arg2 = (ea_t)jarg2; 
  if (arg1) (arg1)->base = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_relobj_1t_1base_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  relobj_t *arg1 = (relobj_t *) 0 ;
  ea_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(relobj_t **)&jarg1; 
  result = (ea_t) ((arg1)->base);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_relobj_1t_1ri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  relobj_t *arg1 = (relobj_t *) 0 ;
  reloc_info_t *arg2 = (reloc_info_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(relobj_t **)&jarg1; 
  arg2 = *(reloc_info_t **)&jarg2; 
  if (arg1) (arg1)->ri = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_relobj_1t_1ri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  relobj_t *arg1 = (relobj_t *) 0 ;
  reloc_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(relobj_t **)&jarg1; 
  result = (reloc_info_t *)& ((arg1)->ri);
  *(reloc_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_new_1relobj_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  relobj_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (relobj_t *)new relobj_t();
  *(relobj_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_relobj_1t_1relocate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  relobj_t *arg1 = (relobj_t *) 0 ;
  ea_t arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(relobj_t **)&jarg1; 
  arg2 = (ea_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->relocate(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_delete_1relobj_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  relobj_t *arg1 = (relobj_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(relobj_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_new_1incrementer_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  hit_counter_t *arg1 = 0 ;
  incrementer_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(hit_counter_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "hit_counter_t & reference is null");
    return 0;
  } 
  result = (incrementer_t *)new incrementer_t(*arg1);
  *(incrementer_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_delete_1incrementer_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  incrementer_t *arg1 = (incrementer_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(incrementer_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_incrementer_1t_1failed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  incrementer_t *arg1 = (incrementer_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(incrementer_t **)&jarg1; 
  (arg1)->failed();
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_parse_1command_1line(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  qstrvec_t *arg2 = (qstrvec_t *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(qstrvec_t **)&jarg2; 
  result = parse_command_line((char const *)arg1,arg2);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_u2cstr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  wchar16_t *arg1 = (wchar16_t *) 0 ;
  qstring *arg2 = (qstring *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(wchar16_t **)&jarg1; 
  arg2 = *(qstring **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)u2cstr((wchar16_t const *)arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_u2cstr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  wchar16_t *arg1 = (wchar16_t *) 0 ;
  qstring *arg2 = (qstring *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(wchar16_t **)&jarg1; 
  arg2 = *(qstring **)&jarg2; 
  result = (bool)u2cstr((wchar16_t const *)arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_c2ustr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  qwstring *arg2 = (qwstring *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(qwstring **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)c2ustr((char const *)arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_c2ustr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  qwstring *arg2 = (qwstring *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(qwstring **)&jarg2; 
  result = (bool)c2ustr((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_utf8_1unicode(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  wchar16_t *arg2 = (wchar16_t *) 0 ;
  size_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(wchar16_t **)&jarg2; 
  arg3 = (size_t)jarg3; 
  result = (int)utf8_unicode((char const *)arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_win_1utf2idb(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)win_utf2idb(arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_char2oem(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  char2oem(arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_oem2char(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  oem2char(arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_set_1codepages(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  int arg1 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)set_codepages(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_get_1codepages(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  result = (int)get_codepages(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_convert_1codepage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jlong jarg4, jint jarg5, jint jarg6, jint jarg7) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  result = (int)convert_codepage(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_convert_1codepage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jlong jarg4, jint jarg5, jint jarg6) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  int arg5 ;
  int arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (int)convert_codepage(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_SubstChar_1set(JNIEnv *jenv, jclass jcls, jchar jarg1) {
  char arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (char)jarg1; 
  SubstChar = arg1;
}


SWIGEXPORT jchar JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_SubstChar_1get(JNIEnv *jenv, jclass jcls) {
  jchar jresult = 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  result = (char)SubstChar;
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_launch_1process_1t_1cb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  launch_process_t *arg1 = (launch_process_t *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(launch_process_t **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->cb = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_launch_1process_1t_1cb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  launch_process_t *arg1 = (launch_process_t *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(launch_process_t **)&jarg1; 
  result =  ((arg1)->cb);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_launch_1process_1t_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  launch_process_t *arg1 = (launch_process_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(launch_process_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_launch_1process_1t_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  launch_process_t *arg1 = (launch_process_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(launch_process_t **)&jarg1; 
  result = (int) ((arg1)->flags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_launch_1process_1t_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  launch_process_t *arg1 = (launch_process_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(launch_process_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->path = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->path, (const char *)arg2);
    } else {
      arg1->path = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_launch_1process_1t_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  launch_process_t *arg1 = (launch_process_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(launch_process_t **)&jarg1; 
  result = (char *) ((arg1)->path);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_launch_1process_1t_1args_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  launch_process_t *arg1 = (launch_process_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(launch_process_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->args = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->args, (const char *)arg2);
    } else {
      arg1->args = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_launch_1process_1t_1args_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  launch_process_t *arg1 = (launch_process_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(launch_process_t **)&jarg1; 
  result = (char *) ((arg1)->args);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_launch_1process_1t_1in_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  launch_process_t *arg1 = (launch_process_t *) 0 ;
  ssize_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(launch_process_t **)&jarg1; 
  arg2 = (ssize_t)jarg2; 
  if (arg1) (arg1)->in_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_launch_1process_1t_1in_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  launch_process_t *arg1 = (launch_process_t *) 0 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(launch_process_t **)&jarg1; 
  result = (ssize_t) ((arg1)->in_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_launch_1process_1t_1out_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  launch_process_t *arg1 = (launch_process_t *) 0 ;
  ssize_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(launch_process_t **)&jarg1; 
  arg2 = (ssize_t)jarg2; 
  if (arg1) (arg1)->out_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_launch_1process_1t_1out_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  launch_process_t *arg1 = (launch_process_t *) 0 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(launch_process_t **)&jarg1; 
  result = (ssize_t) ((arg1)->out_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_launch_1process_1t_1err_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  launch_process_t *arg1 = (launch_process_t *) 0 ;
  ssize_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(launch_process_t **)&jarg1; 
  arg2 = (ssize_t)jarg2; 
  if (arg1) (arg1)->err_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_launch_1process_1t_1err_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  launch_process_t *arg1 = (launch_process_t *) 0 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(launch_process_t **)&jarg1; 
  result = (ssize_t) ((arg1)->err_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_new_1launch_1process_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  launch_process_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (launch_process_t *)new launch_process_t();
  *(launch_process_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_delete_1launch_1process_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  launch_process_t *arg1 = (launch_process_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(launch_process_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_init_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  launch_process_t *arg1 = 0 ;
  qstring *arg2 = (qstring *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(launch_process_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "launch_process_t const & reference is null");
    return 0;
  } 
  arg2 = *(qstring **)&jarg2; 
  result = (void *)init_process((launch_process_t const &)*arg1,arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_term_1process(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  void *arg1 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (int)term_process(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_get_1process_1exit_1code(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  void *arg1 = (void *) 0 ;
  int *arg2 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (int)get_process_exit_code(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_new_1_1_1qthread_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  __qthread_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (__qthread_t *)new __qthread_t();
  *(__qthread_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_delete_1_1_1qthread_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  __qthread_t *arg1 = (__qthread_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(__qthread_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qthread_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  qthread_cb_t arg1 = (qthread_cb_t) 0 ;
  void *arg2 = (void *) 0 ;
  qthread_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(qthread_cb_t *)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (qthread_t)qthread_create(arg1,arg2);
  *(qthread_t *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qthread_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  qthread_t arg1 = (qthread_t) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(qthread_t *)&jarg1; 
  qthread_free(arg1);
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qthread_1join(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  qthread_t arg1 = (qthread_t) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(qthread_t *)&jarg1; 
  result = (bool)qthread_join(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qthread_1kill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  qthread_t arg1 = (qthread_t) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(qthread_t *)&jarg1; 
  result = (bool)qthread_kill(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qthread_1self(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  qthread_t result;
  
  (void)jenv;
  (void)jcls;
  result = (qthread_t)qthread_self();
  *(qthread_t *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_new_1_1_1qsemaphore_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  __qsemaphore_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (__qsemaphore_t *)new __qsemaphore_t();
  *(__qsemaphore_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_delete_1_1_1qsemaphore_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  __qsemaphore_t *arg1 = (__qsemaphore_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(__qsemaphore_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qsem_1create(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  qsemaphore_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (qsemaphore_t)qsem_create((char const *)arg1,arg2);
  *(qsemaphore_t *)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qsem_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  qsemaphore_t arg1 = (qsemaphore_t) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(qsemaphore_t *)&jarg1; 
  result = (bool)qsem_free(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qsem_1post(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  qsemaphore_t arg1 = (qsemaphore_t) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(qsemaphore_t *)&jarg1; 
  result = (bool)qsem_post(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qsem_1wait(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  qsemaphore_t arg1 = (qsemaphore_t) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(qsemaphore_t *)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)qsem_wait(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_new_1_1_1qmutex_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  __qmutex_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (__qmutex_t *)new __qmutex_t();
  *(__qmutex_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_delete_1_1_1qmutex_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  __qmutex_t *arg1 = (__qmutex_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(__qmutex_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qmutex_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  qmutex_t arg1 = (qmutex_t) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(qmutex_t *)&jarg1; 
  result = (bool)qmutex_free(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qmutex_1create(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  qmutex_t result;
  
  (void)jenv;
  (void)jcls;
  result = (qmutex_t)qmutex_create();
  *(qmutex_t *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qmutex_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  qmutex_t arg1 = (qmutex_t) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(qmutex_t *)&jarg1; 
  result = (bool)qmutex_lock(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qmutex_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  qmutex_t arg1 = (qmutex_t) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(qmutex_t *)&jarg1; 
  result = (bool)qmutex_unlock(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_print_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jstring jresult = 0 ;
  uint32 arg1 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint32)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (char *)print(arg1,arg2,arg3,arg4,arg5,arg6);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_make_1longlong(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  uint32 arg1 ;
  int32 arg2 ;
  longlong result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint32)jarg1; 
  arg2 = (int32)jarg2; 
  result = make_longlong(arg1,arg2);
  *(longlong **)&jresult = new longlong((const longlong &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_make_1ulonglong(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  uint32 arg1 ;
  int32 arg2 ;
  ulonglong result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint32)jarg1; 
  arg2 = (int32)jarg2; 
  result = make_ulonglong(arg1,arg2);
  *(ulonglong **)&jresult = new ulonglong((const ulonglong &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_low_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ulonglong *arg1 = 0 ;
  uint32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ulonglong **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ulonglong const & reference is null");
    return 0;
  } 
  result = (uint32)low((ulonglong const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_high_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ulonglong *arg1 = 0 ;
  uint32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ulonglong **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ulonglong const & reference is null");
    return 0;
  } 
  result = (uint32)high((ulonglong const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_low_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  longlong *arg1 = 0 ;
  uint32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(longlong **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "longlong const & reference is null");
    return 0;
  } 
  result = (uint32)low((longlong const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_high_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  longlong *arg1 = 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(longlong **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "longlong const & reference is null");
    return 0;
  } 
  result = (int32)high((longlong const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_print_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jint jarg4) {
  jstring jresult = 0 ;
  longlong arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  longlong *argp1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(longlong **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null longlong");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (char *)print(arg1,arg2,arg3,arg4);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_print_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jint jarg4) {
  jstring jresult = 0 ;
  ulonglong arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  ulonglong *argp1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ulonglong **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ulonglong");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (char *)print(arg1,arg2,arg3,arg4);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_llong_1scan(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  longlong result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = *(char ***)&jarg3; 
  result = llong_scan((char const *)arg1,arg2,(char const **)arg3);
  *(longlong **)&jresult = new longlong((const longlong &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_swap64_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ulonglong arg1 ;
  ulonglong *argp1 ;
  ulonglong result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ulonglong **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ulonglong");
    return 0;
  }
  arg1 = *argp1; 
  result = swap64(arg1);
  *(ulonglong **)&jresult = new ulonglong((const ulonglong &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_swap64_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  longlong arg1 ;
  longlong *argp1 ;
  longlong result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(longlong **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null longlong");
    return 0;
  }
  arg1 = *argp1; 
  result = swap64(arg1);
  *(longlong **)&jresult = new longlong((const longlong &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_swap128(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  uint128 *arg1 = (uint128 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint128 **)&jarg1; 
  swap128(arg1);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_compiler_1info_1t_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  compiler_info_t *arg1 = (compiler_info_t *) 0 ;
  comp_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(compiler_info_t **)&jarg1; 
  arg2 = (comp_t)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_compiler_1info_1t_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  compiler_info_t *arg1 = (compiler_info_t *) 0 ;
  comp_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(compiler_info_t **)&jarg1; 
  result = (comp_t) ((arg1)->id);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_compiler_1info_1t_1cm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  compiler_info_t *arg1 = (compiler_info_t *) 0 ;
  cm_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(compiler_info_t **)&jarg1; 
  arg2 = (cm_t)jarg2; 
  if (arg1) (arg1)->cm = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_compiler_1info_1t_1cm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  compiler_info_t *arg1 = (compiler_info_t *) 0 ;
  cm_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(compiler_info_t **)&jarg1; 
  result = (cm_t) ((arg1)->cm);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_compiler_1info_1t_1size_1i_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  compiler_info_t *arg1 = (compiler_info_t *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(compiler_info_t **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->size_i = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_compiler_1info_1t_1size_1i_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  compiler_info_t *arg1 = (compiler_info_t *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(compiler_info_t **)&jarg1; 
  result = (uchar) ((arg1)->size_i);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_compiler_1info_1t_1size_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  compiler_info_t *arg1 = (compiler_info_t *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(compiler_info_t **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->size_b = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_compiler_1info_1t_1size_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  compiler_info_t *arg1 = (compiler_info_t *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(compiler_info_t **)&jarg1; 
  result = (uchar) ((arg1)->size_b);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_compiler_1info_1t_1size_1e_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  compiler_info_t *arg1 = (compiler_info_t *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(compiler_info_t **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->size_e = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_compiler_1info_1t_1size_1e_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  compiler_info_t *arg1 = (compiler_info_t *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(compiler_info_t **)&jarg1; 
  result = (uchar) ((arg1)->size_e);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_compiler_1info_1t_1defalign_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  compiler_info_t *arg1 = (compiler_info_t *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(compiler_info_t **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->defalign = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_compiler_1info_1t_1defalign_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  compiler_info_t *arg1 = (compiler_info_t *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(compiler_info_t **)&jarg1; 
  result = (uchar) ((arg1)->defalign);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_compiler_1info_1t_1size_1s_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  compiler_info_t *arg1 = (compiler_info_t *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(compiler_info_t **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->size_s = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_compiler_1info_1t_1size_1s_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  compiler_info_t *arg1 = (compiler_info_t *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(compiler_info_t **)&jarg1; 
  result = (uchar) ((arg1)->size_s);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_compiler_1info_1t_1size_1l_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  compiler_info_t *arg1 = (compiler_info_t *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(compiler_info_t **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->size_l = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_compiler_1info_1t_1size_1l_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  compiler_info_t *arg1 = (compiler_info_t *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(compiler_info_t **)&jarg1; 
  result = (uchar) ((arg1)->size_l);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_compiler_1info_1t_1size_1ll_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  compiler_info_t *arg1 = (compiler_info_t *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(compiler_info_t **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->size_ll = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_compiler_1info_1t_1size_1ll_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  compiler_info_t *arg1 = (compiler_info_t *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(compiler_info_t **)&jarg1; 
  result = (uchar) ((arg1)->size_ll);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_new_1compiler_1info_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  compiler_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (compiler_info_t *)new compiler_info_t();
  *(compiler_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_delete_1compiler_1info_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  compiler_info_t *arg1 = (compiler_info_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(compiler_info_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1tag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->tag, (const char *)arg2, 3-1);
      arg1->tag[3-1] = 0;
    } else {
      arg1->tag[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1tag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (char *)(char *) ((arg1)->tag);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  ushort arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (ushort)jarg2; 
  if (arg1) (arg1)->version = arg2;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  ushort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (ushort) ((arg1)->version);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1procName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->procName, (const char *)arg2, 8-1);
      arg1->procName[8-1] = 0;
    } else {
      arg1->procName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1procName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (char *)(char *) ((arg1)->procName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1get_1proc_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->get_proc_name(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1lflags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->lflags = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1lflags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->lflags);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1is_132bit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (bool)((idainfo const *)arg1)->is_32bit();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1is_164bit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (bool)((idainfo const *)arg1)->is_64bit();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1is_1snapshot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (bool)((idainfo const *)arg1)->is_snapshot();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1demnames_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->demnames = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1demnames_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->demnames);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1get_1demname_1form(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar)((idainfo const *)arg1)->get_demname_form();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1filetype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  ushort arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (ushort)jarg2; 
  if (arg1) (arg1)->filetype = arg2;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1filetype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  ushort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (ushort) ((arg1)->filetype);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1like_1binary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (bool)((idainfo const *)arg1)->like_binary();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1fcoresiz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uval_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uval_t)jarg2; 
  if (arg1) (arg1)->fcoresiz = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1fcoresiz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uval_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uval_t) ((arg1)->fcoresiz);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1corestart_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uval_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uval_t)jarg2; 
  if (arg1) (arg1)->corestart = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1corestart_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uval_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uval_t) ((arg1)->corestart);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1ostype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  ushort arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (ushort)jarg2; 
  if (arg1) (arg1)->ostype = arg2;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1ostype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  ushort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (ushort) ((arg1)->ostype);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1apptype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  ushort arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (ushort)jarg2; 
  if (arg1) (arg1)->apptype = arg2;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1apptype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  ushort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (ushort) ((arg1)->apptype);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1startSP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  ea_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (ea_t)jarg2; 
  if (arg1) (arg1)->startSP = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1startSP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  ea_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (ea_t) ((arg1)->startSP);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1af_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  ushort arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (ushort)jarg2; 
  if (arg1) (arg1)->af = arg2;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1af_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  ushort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (ushort) ((arg1)->af);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1startIP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  ea_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (ea_t)jarg2; 
  if (arg1) (arg1)->startIP = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1startIP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  ea_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (ea_t) ((arg1)->startIP);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1beginEA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  ea_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (ea_t)jarg2; 
  if (arg1) (arg1)->beginEA = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1beginEA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  ea_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (ea_t) ((arg1)->beginEA);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1minEA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  ea_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (ea_t)jarg2; 
  if (arg1) (arg1)->minEA = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1minEA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  ea_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (ea_t) ((arg1)->minEA);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1maxEA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  ea_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (ea_t)jarg2; 
  if (arg1) (arg1)->maxEA = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1maxEA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  ea_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (ea_t) ((arg1)->maxEA);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1ominEA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  ea_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (ea_t)jarg2; 
  if (arg1) (arg1)->ominEA = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1ominEA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  ea_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (ea_t) ((arg1)->ominEA);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1omaxEA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  ea_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (ea_t)jarg2; 
  if (arg1) (arg1)->omaxEA = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1omaxEA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  ea_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (ea_t) ((arg1)->omaxEA);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1lowoff_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  ea_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (ea_t)jarg2; 
  if (arg1) (arg1)->lowoff = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1lowoff_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  ea_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (ea_t) ((arg1)->lowoff);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1highoff_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  ea_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (ea_t)jarg2; 
  if (arg1) (arg1)->highoff = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1highoff_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  ea_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (ea_t) ((arg1)->highoff);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1maxref_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uval_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uval_t)jarg2; 
  if (arg1) (arg1)->maxref = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1maxref_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uval_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uval_t) ((arg1)->maxref);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1ASCIIbreak_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->ASCIIbreak = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1ASCIIbreak_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->ASCIIbreak);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1wide_1high_1byte_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->wide_high_byte_first = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1wide_1high_1byte_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->wide_high_byte_first);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1indent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->indent = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1indent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->indent);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1comment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->comment = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1comment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->comment);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1xrefnum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->xrefnum = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1xrefnum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->xrefnum);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1entab_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->s_entab = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1entab_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->s_entab);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1specsegs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->specsegs = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1specsegs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->specsegs);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1void_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->s_void = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1void_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->s_void);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1reserved2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->s_reserved2 = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1reserved2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->s_reserved2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1showauto_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->s_showauto = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1showauto_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->s_showauto);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1auto_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->s_auto = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1auto_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->s_auto);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1limiter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->s_limiter = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1limiter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->s_limiter);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1null_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->s_null = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1null_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->s_null);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1genflags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->s_genflags = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1genflags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->s_genflags);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1use_1allasm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (bool)((idainfo const *)arg1)->use_allasm();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1loading_1idc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (bool)((idainfo const *)arg1)->loading_idc();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1showpref_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->s_showpref = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1showpref_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->s_showpref);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1prefseg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->s_prefseg = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1prefseg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->s_prefseg);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1asmtype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->asmtype = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1asmtype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->asmtype);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1baseaddr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uval_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uval_t)jarg2; 
  if (arg1) (arg1)->baseaddr = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1baseaddr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uval_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uval_t) ((arg1)->baseaddr);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1xrefflag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->s_xrefflag = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1xrefflag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->s_xrefflag);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1binSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->binSize = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1binSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (short) ((arg1)->binSize);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1cmtflg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->s_cmtflg = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1cmtflg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->s_cmtflg);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1nametype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->nametype = arg2;
}


SWIGEXPORT jchar JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1nametype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (char) ((arg1)->nametype);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1showbads_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->s_showbads = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1showbads_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->s_showbads);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1prefflag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->s_prefflag = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1prefflag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->s_prefflag);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1packbase_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->s_packbase = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1packbase_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->s_packbase);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1asciiflags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->asciiflags = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1asciiflags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->asciiflags);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1listnames_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->listnames = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1listnames_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->listnames);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1ASCIIpref_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ASCIIpref, (const char *)arg2, 16-1);
      arg1->ASCIIpref[16-1] = 0;
    } else {
      arg1->ASCIIpref[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1ASCIIpref_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (char *)(char *) ((arg1)->ASCIIpref);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1ASCIIsernum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uval_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uval_t)jarg2; 
  if (arg1) (arg1)->ASCIIsernum = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1ASCIIsernum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uval_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uval_t) ((arg1)->ASCIIsernum);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1ASCIIzeroes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->ASCIIzeroes = arg2;
}


SWIGEXPORT jchar JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1ASCIIzeroes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (char) ((arg1)->ASCIIzeroes);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1graph_1view_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->graph_view = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1graph_1view_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->graph_view);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1reserved5_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->s_reserved5 = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1reserved5_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->s_reserved5);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1tribyte_1order_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->tribyte_order = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1tribyte_1order_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->tribyte_order);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1mf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->mf = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1mf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->mf);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1org_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->s_org = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1org_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->s_org);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1assume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->s_assume = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1assume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->s_assume);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1checkarg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->s_checkarg = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1s_1checkarg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->s_checkarg);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1start_1ss_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  sel_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (sel_t)jarg2; 
  if (arg1) (arg1)->start_ss = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1start_1ss_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  sel_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (sel_t) ((arg1)->start_ss);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1start_1cs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  sel_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (sel_t)jarg2; 
  if (arg1) (arg1)->start_cs = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1start_1cs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  sel_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (sel_t) ((arg1)->start_cs);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1main_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  ea_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (ea_t)jarg2; 
  if (arg1) (arg1)->main = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1main_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  ea_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (ea_t) ((arg1)->main);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1short_1demnames_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->short_demnames = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1short_1demnames_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uint32) ((arg1)->short_demnames);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1long_1demnames_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->long_demnames = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1long_1demnames_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uint32) ((arg1)->long_demnames);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1datatypes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uval_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uval_t)jarg2; 
  if (arg1) (arg1)->datatypes = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1datatypes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uval_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uval_t) ((arg1)->datatypes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1strtype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->strtype = arg2;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1strtype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (int32) ((arg1)->strtype);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1af2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  ushort arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (ushort)jarg2; 
  if (arg1) (arg1)->af2 = arg2;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1af2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  ushort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (ushort) ((arg1)->af2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1namelen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  ushort arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (ushort)jarg2; 
  if (arg1) (arg1)->namelen = arg2;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1namelen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  ushort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (ushort) ((arg1)->namelen);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1margin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  ushort arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (ushort)jarg2; 
  if (arg1) (arg1)->margin = arg2;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1margin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  ushort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (ushort) ((arg1)->margin);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1lenxref_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  ushort arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (ushort)jarg2; 
  if (arg1) (arg1)->lenxref = arg2;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1lenxref_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  ushort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (ushort) ((arg1)->lenxref);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1lprefix_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->lprefix, (const char *)arg2, 16-1);
      arg1->lprefix[16-1] = 0;
    } else {
      arg1->lprefix[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1lprefix_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (char *)(char *) ((arg1)->lprefix);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1lprefixlen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->lprefixlen = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1lprefixlen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->lprefixlen);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1cc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  idainfo *arg1 = (idainfo *) 0 ;
  compiler_info_t *arg2 = (compiler_info_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = *(compiler_info_t **)&jarg2; 
  if (arg1) (arg1)->cc = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1cc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  compiler_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (compiler_info_t *)& ((arg1)->cc);
  *(compiler_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1database_1change_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->database_change_count = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1database_1change_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uint32) ((arg1)->database_change_count);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1size_1ldbl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->size_ldbl = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1size_1ldbl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar) ((arg1)->size_ldbl);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1appcall_1options_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->appcall_options = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1appcall_1options_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uint32) ((arg1)->appcall_options);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1reserved_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  idainfo *arg1 = (idainfo *) 0 ;
  uchar *arg2 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 55) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    uchar *b = (uchar *) arg1->reserved;
    for (ii = 0; ii < (size_t)55; ii++) b[ii] = *((uchar *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jshortArray JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idainfo_1reserved_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshortArray jresult = 0 ;
  idainfo *arg1 = (idainfo *) 0 ;
  uchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  result = (uchar *)(uchar *) ((arg1)->reserved);
  jresult = SWIG_JavaArrayOutUchar(jenv, result, 55); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_new_1idainfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  idainfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (idainfo *)new idainfo();
  *(idainfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_delete_1idainfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  idainfo *arg1 = (idainfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(idainfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_inf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  idainfo *arg1 = (idainfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1; 
  inf = *arg1;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_inf_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  idainfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (idainfo *)&inf;
  *(idainfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dual_1text_1options_1t_1mysize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dual_text_options_t *arg1 = (dual_text_options_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dual_text_options_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mysize = arg2;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dual_1text_1options_1t_1mysize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dual_text_options_t *arg1 = (dual_text_options_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dual_text_options_t **)&jarg1; 
  result = (int) ((arg1)->mysize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dual_1text_1options_1t_1graph_1view_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  dual_text_options_t *arg1 = (dual_text_options_t *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dual_text_options_t **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->graph_view = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dual_1text_1options_1t_1graph_1view_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  dual_text_options_t *arg1 = (dual_text_options_t *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dual_text_options_t **)&jarg1; 
  result = (uchar) ((arg1)->graph_view);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dual_1text_1options_1t_1xrefnum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  dual_text_options_t *arg1 = (dual_text_options_t *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dual_text_options_t **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->xrefnum = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dual_1text_1options_1t_1xrefnum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  dual_text_options_t *arg1 = (dual_text_options_t *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dual_text_options_t **)&jarg1; 
  result = (uchar) ((arg1)->xrefnum);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dual_1text_1options_1t_1s_1showpref_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  dual_text_options_t *arg1 = (dual_text_options_t *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dual_text_options_t **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->s_showpref = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dual_1text_1options_1t_1s_1showpref_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  dual_text_options_t *arg1 = (dual_text_options_t *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dual_text_options_t **)&jarg1; 
  result = (uchar) ((arg1)->s_showpref);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dual_1text_1options_1t_1comment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  dual_text_options_t *arg1 = (dual_text_options_t *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dual_text_options_t **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->comment = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dual_1text_1options_1t_1comment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  dual_text_options_t *arg1 = (dual_text_options_t *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dual_text_options_t **)&jarg1; 
  result = (uchar) ((arg1)->comment);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dual_1text_1options_1t_1indent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  dual_text_options_t *arg1 = (dual_text_options_t *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dual_text_options_t **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->indent = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dual_1text_1options_1t_1indent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  dual_text_options_t *arg1 = (dual_text_options_t *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dual_text_options_t **)&jarg1; 
  result = (uchar) ((arg1)->indent);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dual_1text_1options_1t_1s_1limiter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  dual_text_options_t *arg1 = (dual_text_options_t *) 0 ;
  uchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dual_text_options_t **)&jarg1; 
  arg2 = (uchar)jarg2; 
  if (arg1) (arg1)->s_limiter = arg2;
}


SWIGEXPORT jshort JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dual_1text_1options_1t_1s_1limiter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  dual_text_options_t *arg1 = (dual_text_options_t *) 0 ;
  uchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dual_text_options_t **)&jarg1; 
  result = (uchar) ((arg1)->s_limiter);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dual_1text_1options_1t_1margin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dual_text_options_t *arg1 = (dual_text_options_t *) 0 ;
  ushort arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dual_text_options_t **)&jarg1; 
  arg2 = (ushort)jarg2; 
  if (arg1) (arg1)->margin = arg2;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dual_1text_1options_1t_1margin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dual_text_options_t *arg1 = (dual_text_options_t *) 0 ;
  ushort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dual_text_options_t **)&jarg1; 
  result = (ushort) ((arg1)->margin);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dual_1text_1options_1t_1binSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dual_text_options_t *arg1 = (dual_text_options_t *) 0 ;
  ushort arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dual_text_options_t **)&jarg1; 
  arg2 = (ushort)jarg2; 
  if (arg1) (arg1)->binSize = arg2;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dual_1text_1options_1t_1binSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dual_text_options_t *arg1 = (dual_text_options_t *) 0 ;
  ushort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dual_text_options_t **)&jarg1; 
  result = (ushort) ((arg1)->binSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_new_1dual_1text_1options_1t_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  dual_text_options_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (dual_text_options_t *)new dual_text_options_t(arg1);
  *(dual_text_options_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_new_1dual_1text_1options_1t_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  idainfo *arg1 = 0 ;
  dual_text_options_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(idainfo **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "idainfo const & reference is null");
    return 0;
  } 
  result = (dual_text_options_t *)new dual_text_options_t((idainfo const &)*arg1);
  *(dual_text_options_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_delete_1dual_1text_1options_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dual_text_options_t *arg1 = (dual_text_options_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dual_text_options_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_text_1options_1t_1text_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  text_options_t *arg1 = (text_options_t *) 0 ;
  dual_text_options_t *arg2 = (dual_text_options_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(text_options_t **)&jarg1; 
  arg2 = *(dual_text_options_t **)&jarg2; 
  if (arg1) (arg1)->text = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_text_1options_1t_1text_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  text_options_t *arg1 = (text_options_t *) 0 ;
  dual_text_options_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(text_options_t **)&jarg1; 
  result = (dual_text_options_t *)& ((arg1)->text);
  *(dual_text_options_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_text_1options_1t_1graph_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  text_options_t *arg1 = (text_options_t *) 0 ;
  dual_text_options_t *arg2 = (dual_text_options_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(text_options_t **)&jarg1; 
  arg2 = *(dual_text_options_t **)&jarg2; 
  if (arg1) (arg1)->graph = *arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_text_1options_1t_1graph_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  text_options_t *arg1 = (text_options_t *) 0 ;
  dual_text_options_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(text_options_t **)&jarg1; 
  result = (dual_text_options_t *)& ((arg1)->graph);
  *(dual_text_options_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_new_1text_1options_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  text_options_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (text_options_t *)new text_options_t();
  *(text_options_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_delete_1text_1options_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  text_options_t *arg1 = (text_options_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(text_options_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dto_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  text_options_t *arg1 = (text_options_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(text_options_t **)&jarg1; 
  dto = *arg1;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dto_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  text_options_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (text_options_t *)&dto;
  *(text_options_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_showRepeatables(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)showRepeatables();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_showAllComments(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)showAllComments();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_showComments(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)showComments();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_should_1trace_1sp(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)should_trace_sp();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_should_1create_1stkvars(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)should_create_stkvars();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_calc_1default_1idaplace_1flags(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)calc_default_idaplace_flags();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_toEA(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  sel_t arg1 ;
  ea_t arg2 ;
  ea_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (sel_t)jarg1; 
  arg2 = (ea_t)jarg2; 
  result = (ea_t)toEA(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idb2scr(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (char *)idb2scr(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_scr2idb(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (char *)scr2idb(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_ansi2idb(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (char *)ansi2idb(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dto_1copy_1to_1inf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dual_text_options_t *arg1 = (dual_text_options_t *) 0 ;
  idainfo *arg2 = (idainfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dual_text_options_t **)&jarg1; 
  arg2 = *(idainfo **)&jarg2; 
  dto_copy_to_inf((dual_text_options_t const *)arg1,arg2);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dto_1copy_1from_1inf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dual_text_options_t *arg1 = (dual_text_options_t *) 0 ;
  idainfo *arg2 = (idainfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dual_text_options_t **)&jarg1; 
  arg2 = *(idainfo **)&jarg2; 
  dto_copy_from_inf(arg1,(idainfo const *)arg2);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dto_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  dual_text_options_t *arg1 = (dual_text_options_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dual_text_options_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  dto_init(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qfopen(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  FILE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (FILE *)qfopen((char const *)arg1,(char const *)arg2);
  *(FILE **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qfread(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (size_t)jarg3; 
  result = (int)qfread(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qfwrite(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (size_t)jarg3; 
  result = (int)qfwrite(arg1,(void const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qftell(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  result = (int32)qftell(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qfseek(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  int32 arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)qfseek(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qfclose(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  result = (int)qfclose(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qflush(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  result = (int)qflush(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qtmpfile(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FILE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FILE *)qtmpfile();
  *(FILE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qrename(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)qrename((char const *)arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qtmpnam(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  result = (char *)qtmpnam(arg1,arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qfputc(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  FILE *arg2 = (FILE *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = *(FILE **)&jarg2; 
  result = (int)qfputc(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qfgetc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  result = (int)qfgetc(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qfgets(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  FILE *arg3 = (FILE *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  arg3 = *(FILE **)&jarg3; 
  result = (char *)qfgets(arg1,arg2,arg3);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qfputs(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(FILE **)&jarg2; 
  result = (int)qfputs((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qvfprintf(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  char *arg2 = (char *) 0 ;
  va_list arg3 ;
  va_list *argp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  argp3 = *(va_list **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null va_list");
    return 0;
  }
  arg3 = *argp3; 
  result = (int)qvfprintf(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qvprintf(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  va_list *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(va_list **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null va_list");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)qvprintf((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qvfscanf(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  char *arg2 = (char *) 0 ;
  va_list arg3 ;
  va_list *argp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  argp3 = *(va_list **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null va_list");
    return 0;
  }
  arg3 = *argp3; 
  result = (int)qvfscanf(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qgets(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  result = (char *)qgets(arg1,arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qfprintf(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)qfprintf(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qprintf(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (int)qprintf((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_freadbytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)freadbytes(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_fwritebytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)fwritebytes(arg1,(void const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_fread2bytes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  int16 *arg2 = (int16 *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = *(int16 **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)fread2bytes(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_fwrite2bytes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  int16 *arg2 = (int16 *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = *(int16 **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)fwrite2bytes(arg1,(short const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_fread2bytes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  uint16 *arg2 = (uint16 *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = *(uint16 **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)fread2bytes(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_fwrite2bytes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  uint16 *arg2 = (uint16 *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = *(uint16 **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)fwrite2bytes(arg1,(unsigned short const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_fread4bytes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  int32 *arg2 = (int32 *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = *(int32 **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)fread4bytes(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_fwrite4bytes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  int32 *arg2 = (int32 *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = *(int32 **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)fwrite4bytes(arg1,(int const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_fread4bytes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  uint32 *arg2 = (uint32 *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = *(uint32 **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)fread4bytes(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_fwrite4bytes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  uint32 *arg2 = (uint32 *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = *(uint32 **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)fwrite4bytes(arg1,(unsigned int const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_fread8bytes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  longlong *arg2 = (longlong *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = *(longlong **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)fread8bytes(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_fwrite8bytes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  longlong *arg2 = (longlong *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = *(longlong **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)fwrite8bytes(arg1,(longlong const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_fread8bytes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  ulonglong *arg2 = (ulonglong *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = *(ulonglong **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)fread8bytes(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_fwrite8bytes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  ulonglong *arg2 = (ulonglong *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = *(ulonglong **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)fwrite8bytes(arg1,(ulonglong const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_ivalue(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  help_t arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (help_t)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  result = (char *)ivalue(arg1,arg2,arg3);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qivalue(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  help_t arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (help_t)jarg1; 
  result = (char *)qivalue(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_get_1predef_1insn_1cmt(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  insn_t *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(insn_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "insn_t const & reference is null");
    return 0;
  } 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  result = (ssize_t)get_predef_insn_cmt((insn_t const &)*arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_get_1predef_1cmt(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (ssize_t)get_predef_cmt((char const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_askaddr(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jstring jarg2) {
  jint jresult = 0 ;
  ea_t *arg1 = (ea_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  ea_t temp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    arg1 = &temp1; 
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)askaddr(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  {
    jlong jvalue = (jlong)temp1;
    jenv->SetLongArrayRegion(jarg1, 0, 1, &jvalue);
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dirty_1infos_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  dirty_infos = arg1;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_dirty_1infos_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)dirty_infos;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_request_1refresh(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  request_refresh(arg1);
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_exec_1request_1t_1valid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  exec_request_t *arg1 = (exec_request_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(exec_request_t **)&jarg1; 
  result = (bool)((exec_request_t const *)arg1)->valid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_exec_1request_1t_1code_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  exec_request_t *arg1 = (exec_request_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(exec_request_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->code = arg2;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_exec_1request_1t_1code_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  exec_request_t *arg1 = (exec_request_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(exec_request_t **)&jarg1; 
  result = (int) ((arg1)->code);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_exec_1request_1t_1sem_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  exec_request_t *arg1 = (exec_request_t *) 0 ;
  qsemaphore_t arg2 = (qsemaphore_t) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(exec_request_t **)&jarg1; 
  arg2 = *(qsemaphore_t *)&jarg2; 
  if (arg1) (arg1)->sem = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_exec_1request_1t_1sem_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  exec_request_t *arg1 = (exec_request_t *) 0 ;
  qsemaphore_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(exec_request_t **)&jarg1; 
  result = (qsemaphore_t) ((arg1)->sem);
  *(qsemaphore_t *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_exec_1request_1t_1execute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  exec_request_t *arg1 = (exec_request_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(exec_request_t **)&jarg1; 
  result = (int)(arg1)->execute();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_delete_1exec_1request_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  exec_request_t *arg1 = (exec_request_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(exec_request_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_jumpto_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  ea_t arg1 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ea_t)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)jumpto(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_jumpto_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  ea_t arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ea_t)jarg1; 
  result = (bool)jumpto(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_banner(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (bool)banner(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_is_1msg_1inited(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)is_msg_inited();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_refresh_1idaview(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  refresh_idaview();
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_refresh_1idaview_1anyway(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  refresh_idaview_anyway();
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_analyzer_1options(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  analyzer_options();
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_get_1screen_1ea(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ea_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ea_t)get_screen_ea();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_get_1opnum(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)get_opnum();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_get_1cursor(JNIEnv *jenv, jclass jcls, jintArray jarg1, jintArray jarg2) {
  jboolean jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int temp1 ;
  int temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    arg1 = &temp1; 
  }
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    arg2 = &temp2; 
  }
  result = (bool)get_cursor(arg1,arg2);
  jresult = (jboolean)result; 
  {
    jint jvalue = (jint)temp1;
    jenv->SetIntArrayRegion(jarg1, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_get_1curline(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)get_curline();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_read_1selection(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  jboolean jresult = 0 ;
  ea_t *arg1 = (ea_t *) 0 ;
  ea_t *arg2 = (ea_t *) 0 ;
  ea_t temp1 ;
  ea_t temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    arg1 = &temp1; 
  }
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    arg2 = &temp2; 
  }
  result = (bool)read_selection(arg1,arg2);
  jresult = (jboolean)result; 
  {
    jlong jvalue = (jlong)temp1;
    jenv->SetLongArrayRegion(jarg1, 0, 1, &jvalue);
  }
  {
    jlong jvalue = (jlong)temp2;
    jenv->SetLongArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_unmark_1selection(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  unmark_selection();
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1url(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  open_url((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_get_1hexdump_1ea(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  ea_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (ea_t)get_hexdump_ea(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_set_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)set_xml((char const *)arg1,(char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_get_1xml(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  idc_value_t *arg2 = (idc_value_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(idc_value_t **)&jarg2; 
  result = (bool)get_xml((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_del_1xml(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)del_xml((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_push_1xml(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)push_xml((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_pop_1xml(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)pop_xml();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_get_1key_1code(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ushort result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ushort)get_key_code((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_refresh_1navband(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  refresh_navband(arg1);
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_refresh_1chooser(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)refresh_chooser((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_close_1chooser(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)close_chooser((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_install_1command_1interpreter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cli_t *arg1 = (cli_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cli_t **)&jarg1; 
  install_command_interpreter((cli_t const *)arg1);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_remove_1command_1interpreter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cli_t *arg1 = (cli_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cli_t **)&jarg1; 
  remove_command_interpreter((cli_t const *)arg1);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_gen_1disasm_1text(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jboolean jarg4) {
  ea_t arg1 ;
  ea_t arg2 ;
  text_t *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ea_t)jarg1; 
  arg2 = (ea_t)jarg2; 
  arg3 = *(text_t **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "text_t & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  gen_disasm_text(arg1,arg2,*arg3,arg4);
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_execute_1sync(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  exec_request_t *arg1 = 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(exec_request_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "exec_request_t & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  result = (int)execute_sync(*arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_set_1dock_1pos_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  result = (bool)set_dock_pos((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_set_1dock_1pos_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)set_dock_pos((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_set_1dock_1pos_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)set_dock_pos((char const *)arg1,(char const *)arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_set_1dock_1pos_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)set_dock_pos((char const *)arg1,(char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_set_1dock_1pos_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (bool)set_dock_pos((char const *)arg1,(char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_enable_1input_1hotkeys(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jboolean jresult = 0 ;
  bool arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (bool)enable_input_hotkeys(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_add_1menu_1item(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jint jarg4, jlong jarg5, jlong jarg6) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  menu_item_callback_t *arg5 = (menu_item_callback_t *) 0 ;
  void *arg6 = (void *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = *(menu_item_callback_t **)&jarg5; 
  arg6 = *(void **)&jarg6; 
  result = (bool)add_menu_item((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_del_1menu_1item(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)del_menu_item((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_create_1tform(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  HWND *arg2 = (HWND *) 0 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(HWND **)&jarg2; 
  result = (TForm *)create_tform((char const *)arg1,arg2);
  *(TForm **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_get_1tform_1handle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  TForm *arg1 = (TForm *) 0 ;
  HWND result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TForm **)&jarg1; 
  result = (HWND)get_tform_handle(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1tform(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  TForm *arg1 = (TForm *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TForm **)&jarg1; 
  arg2 = (int)jarg2; 
  open_tform(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_close_1tform(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  TForm *arg1 = (TForm *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TForm **)&jarg1; 
  arg2 = (int)jarg2; 
  close_tform(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_switchto_1tform(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  TForm *arg1 = (TForm *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TForm **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  switchto_tform(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_find_1tform(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (TForm *)find_tform((char const *)arg1);
  *(TForm **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_get_1current_1tform(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TForm *)get_current_tform();
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_create_1custom_1viewer(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  TWinControl *arg2 = (TWinControl *) 0 ;
  place_t *arg3 = (place_t *) 0 ;
  place_t *arg4 = (place_t *) 0 ;
  place_t *arg5 = (place_t *) 0 ;
  int arg6 ;
  void *arg7 = (void *) 0 ;
  TCustomControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(TWinControl **)&jarg2; 
  arg3 = *(place_t **)&jarg3; 
  arg4 = *(place_t **)&jarg4; 
  arg5 = *(place_t **)&jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (TCustomControl *)create_custom_viewer((char const *)arg1,arg2,(place_t const *)arg3,(place_t const *)arg4,(place_t const *)arg5,arg6,arg7);
  *(TCustomControl **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_refresh_1custom_1viewer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TCustomControl *arg1 = (TCustomControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TCustomControl **)&jarg1; 
  refresh_custom_viewer(arg1);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_destroy_1custom_1viewer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TCustomControl *arg1 = (TCustomControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TCustomControl **)&jarg1; 
  destroy_custom_viewer(arg1);
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_jumpto_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  TCustomControl *arg1 = (TCustomControl *) 0 ;
  place_t *arg2 = (place_t *) 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TCustomControl **)&jarg1; 
  arg2 = *(place_t **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)jumpto(arg1,arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_get_1custom_1viewer_1place(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2, jintArray jarg3, jintArray jarg4) {
  jlong jresult = 0 ;
  TCustomControl *arg1 = (TCustomControl *) 0 ;
  bool arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int temp3 ;
  int temp4 ;
  place_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TCustomControl **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    arg3 = &temp3; 
  }
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    arg4 = &temp4; 
  }
  result = (place_t *)get_custom_viewer_place(arg1,arg2,arg3,arg4);
  *(place_t **)&jresult = result; 
  {
    jint jvalue = (jint)temp3;
    jenv->SetIntArrayRegion(jarg3, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp4;
    jenv->SetIntArrayRegion(jarg4, 0, 1, &jvalue);
  }
  
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_set_1custom_1viewer_1popup_1menu(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  TCustomControl *arg1 = (TCustomControl *) 0 ;
  TPopupMenu *arg2 = (TPopupMenu *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TCustomControl **)&jarg1; 
  arg2 = *(TPopupMenu **)&jarg2; 
  set_custom_viewer_popup_menu(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_add_1custom_1viewer_1popup_1item(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  TCustomControl *arg1 = (TCustomControl *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  menu_item_callback_t *arg4 = (menu_item_callback_t *) 0 ;
  void *arg5 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TCustomControl **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(menu_item_callback_t **)&jarg4; 
  arg5 = *(void **)&jarg5; 
  add_custom_viewer_popup_item(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_set_1custom_1viewer_1handlers(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  TCustomControl *arg1 = (TCustomControl *) 0 ;
  custom_viewer_keydown_t *arg2 = (custom_viewer_keydown_t *) 0 ;
  custom_viewer_popup_t *arg3 = (custom_viewer_popup_t *) 0 ;
  custom_viewer_dblclick_t *arg4 = (custom_viewer_dblclick_t *) 0 ;
  custom_viewer_curpos_t *arg5 = (custom_viewer_curpos_t *) 0 ;
  custom_viewer_close_t *arg6 = (custom_viewer_close_t *) 0 ;
  void *arg7 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TCustomControl **)&jarg1; 
  arg2 = *(custom_viewer_keydown_t **)&jarg2; 
  arg3 = *(custom_viewer_popup_t **)&jarg3; 
  arg4 = *(custom_viewer_dblclick_t **)&jarg4; 
  arg5 = *(custom_viewer_curpos_t **)&jarg5; 
  arg6 = *(custom_viewer_close_t **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  set_custom_viewer_handlers(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_set_1custom_1viewer_1handler(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  TCustomControl *arg1 = (TCustomControl *) 0 ;
  custom_viewer_handler_id_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TCustomControl **)&jarg1; 
  arg2 = (custom_viewer_handler_id_t)jarg2; 
  arg3 = *(void **)&jarg3; 
  result = (void *)set_custom_viewer_handler(arg1,arg2,arg3);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_get_1custom_1viewer_1curline(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jstring jresult = 0 ;
  TCustomControl *arg1 = (TCustomControl *) 0 ;
  bool arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TCustomControl **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (char *)get_custom_viewer_curline(arg1,arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_get_1current_1viewer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TCustomControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TCustomControl *)get_current_viewer();
  *(TCustomControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_set_1custom_1viewer_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  TCustomControl *arg1 = (TCustomControl *) 0 ;
  place_t *arg2 = (place_t *) 0 ;
  place_t *arg3 = (place_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TCustomControl **)&jarg1; 
  arg2 = *(place_t **)&jarg2; 
  arg3 = *(place_t **)&jarg3; 
  set_custom_viewer_range(arg1,(place_t const *)arg2,(place_t const *)arg3);
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_is_1idaview(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  TCustomControl *arg1 = (TCustomControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TCustomControl **)&jarg1; 
  result = (bool)is_idaview(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_readsel2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  TCustomControl *arg1 = (TCustomControl *) 0 ;
  twinpos_t *arg2 = (twinpos_t *) 0 ;
  twinpos_t *arg3 = (twinpos_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TCustomControl **)&jarg1; 
  arg2 = *(twinpos_t **)&jarg2; 
  arg3 = *(twinpos_t **)&jarg3; 
  result = (bool)readsel2(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_clearBreak(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  clearBreak();
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_setBreak(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  setBreak();
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_wasBreak(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)wasBreak();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_ui_1load_1new_1file(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  linput_t *arg2 = (linput_t *) 0 ;
  ushort arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(linput_t **)&jarg2; 
  arg3 = (ushort)jarg3; 
  result = (bool)ui_load_new_file((char const *)arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_ui_1run_1debugger(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char **arg4 = (char **) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(char ***)&jarg4; 
  result = (bool)ui_run_debugger((char const *)arg1,(char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_add_1idc_1hotkey(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)add_idc_hotkey((char const *)arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_del_1idc_1hotkey(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)del_idc_hotkey((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1exports_1window(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ea_t arg1 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ea_t)jarg1; 
  result = (TForm *)open_exports_window(arg1);
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1imports_1window(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ea_t arg1 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ea_t)jarg1; 
  result = (TForm *)open_imports_window(arg1);
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1names_1window(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ea_t arg1 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ea_t)jarg1; 
  result = (TForm *)open_names_window(arg1);
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1funcs_1window(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ea_t arg1 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ea_t)jarg1; 
  result = (TForm *)open_funcs_window(arg1);
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1strings_1window_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  ea_t arg1 ;
  ea_t arg2 ;
  ea_t arg3 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ea_t)jarg1; 
  arg2 = (ea_t)jarg2; 
  arg3 = (ea_t)jarg3; 
  result = (TForm *)open_strings_window(arg1,arg2,arg3);
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1strings_1window_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  ea_t arg1 ;
  ea_t arg2 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ea_t)jarg1; 
  arg2 = (ea_t)jarg2; 
  result = (TForm *)open_strings_window(arg1,arg2);
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1strings_1window_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ea_t arg1 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ea_t)jarg1; 
  result = (TForm *)open_strings_window(arg1);
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1segments_1window(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ea_t arg1 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ea_t)jarg1; 
  result = (TForm *)open_segments_window(arg1);
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1segregs_1window(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ea_t arg1 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ea_t)jarg1; 
  result = (TForm *)open_segregs_window(arg1);
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1selectors_1window(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TForm *)open_selectors_window();
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1signatures_1window(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TForm *)open_signatures_window();
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1tils_1window(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TForm *)open_tils_window();
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1loctypes_1window(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (TForm *)open_loctypes_window(arg1);
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1calls_1window(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ea_t arg1 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ea_t)jarg1; 
  result = (TForm *)open_calls_window(arg1);
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1problems_1window(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ea_t arg1 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ea_t)jarg1; 
  result = (TForm *)open_problems_window(arg1);
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1bpts_1window(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ea_t arg1 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ea_t)jarg1; 
  result = (TForm *)open_bpts_window(arg1);
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1threads_1window(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TForm *)open_threads_window();
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1modules_1window(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TForm *)open_modules_window();
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1trace_1window(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TForm *)open_trace_window();
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1stack_1window(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TForm *)open_stack_window();
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1xrefs_1window(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ea_t arg1 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ea_t)jarg1; 
  result = (TForm *)open_xrefs_window(arg1);
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1frame_1window(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  func_t *arg1 = (func_t *) 0 ;
  uval_t arg2 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(func_t **)&jarg1; 
  arg2 = (uval_t)jarg2; 
  result = (TForm *)open_frame_window(arg1,arg2);
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1navband_1window(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  ea_t arg1 ;
  int arg2 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ea_t)jarg1; 
  arg2 = (int)jarg2; 
  result = (TForm *)open_navband_window(arg1,arg2);
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1enums_1window_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tid_t arg1 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tid_t)jarg1; 
  result = (TForm *)open_enums_window(arg1);
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1enums_1window_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TForm *)open_enums_window();
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1structs_1window_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  tid_t arg1 ;
  uval_t arg2 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tid_t)jarg1; 
  arg2 = (uval_t)jarg2; 
  result = (TForm *)open_structs_window(arg1,arg2);
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1structs_1window_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tid_t arg1 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tid_t)jarg1; 
  result = (TForm *)open_structs_window(arg1);
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1structs_1window_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TForm *)open_structs_window();
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1disasm_1window_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  areavec_t *arg2 = (areavec_t *) 0 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(areavec_t **)&jarg2; 
  result = (TForm *)open_disasm_window((char const *)arg1,(areavec_t const *)arg2);
  *(TForm **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1disasm_1window_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (TForm *)open_disasm_window((char const *)arg1);
  *(TForm **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1hexdump_1window(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (TForm *)open_hexdump_window((char const *)arg1);
  *(TForm **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1notepad_1window(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TForm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TForm *)open_notepad_window();
  *(TForm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_choose_1idasgn(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)choose_idasgn();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_choose_1til(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  result = (bool)choose_til(arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_choose_1entry(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ea_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ea_t)choose_entry((char const *)arg1);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_choose_1name(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ea_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ea_t)choose_name((char const *)arg1);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_choose_1stkvar_1xref(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  func_t *arg1 = (func_t *) 0 ;
  member_t *arg2 = (member_t *) 0 ;
  ea_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(func_t **)&jarg1; 
  arg2 = *(member_t **)&jarg2; 
  result = (ea_t)choose_stkvar_xref(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_choose_1xref(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ea_t arg1 ;
  ea_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ea_t)jarg1; 
  result = (ea_t)choose_xref(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_choose_1enum(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  enum_t arg2 ;
  enum_t *argp2 ;
  enum_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(enum_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null enum_t");
    return 0;
  }
  arg2 = *argp2; 
  result = choose_enum((char const *)arg1,arg2);
  *(enum_t **)&jresult = new enum_t((const enum_t &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_choose_1enum_1by_1value(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  enum_t arg2 ;
  uval_t arg3 ;
  uchar *arg4 = (uchar *) 0 ;
  enum_t *argp2 ;
  enum_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(enum_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null enum_t");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (uval_t)jarg3; 
  arg4 = *(uchar **)&jarg4; 
  result = choose_enum_by_value((char const *)arg1,arg2,arg3,arg4);
  *(enum_t **)&jresult = new enum_t((const enum_t &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_choose_1func(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ea_t arg2 ;
  func_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ea_t)jarg2; 
  result = (func_t *)choose_func((char const *)arg1,arg2);
  *(func_t **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_choose_1segm(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ea_t arg2 ;
  segment_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ea_t)jarg2; 
  result = (segment_t *)choose_segm((char const *)arg1,arg2);
  *(segment_t **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_choose_1segreg(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  segreg_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (segreg_t *)choose_segreg((char const *)arg1);
  *(segreg_t **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_choose_1struc(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  struc_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (struc_t *)choose_struc((char const *)arg1);
  *(struc_t **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_add_1chooser_1command_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  chooser_cb_t *arg3 = (chooser_cb_t *) 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(chooser_cb_t **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)add_chooser_command((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_add_1chooser_1command_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jint jarg4, jint jarg5) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  chooser_cb_t *arg3 = (chooser_cb_t *) 0 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(chooser_cb_t **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)add_chooser_command((char const *)arg1,(char const *)arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_add_1chooser_1command_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  chooser_cb_t *arg3 = (chooser_cb_t *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(chooser_cb_t **)&jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)add_chooser_command((char const *)arg1,(char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_add_1chooser_1command_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  chooser_cb_t *arg3 = (chooser_cb_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(chooser_cb_t **)&jarg3; 
  result = (bool)add_chooser_command((char const *)arg1,(char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_get_1chooser_1obj(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (void *)get_chooser_obj((char const *)arg1);
  *(void **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_enable_1chooser_1item_1attrs(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  result = (bool)enable_chooser_item_attrs((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_show_1wait_1box_1v(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  va_list *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  argp2 = *(va_list **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null va_list");
    return ;
  }
  arg2 = *argp2; 
  show_wait_box_v((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_show_1wait_1box(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  show_wait_box((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_hide_1wait_1box(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  hide_wait_box();
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_replace_1wait_1box(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  replace_wait_box((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_AskUsingForm_1cv(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  va_list *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(va_list **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null va_list");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)AskUsingForm_cv((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_close_1form(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  TView **arg1 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TView ***)&jarg1; 
  arg2 = (int)jarg2; 
  close_form(arg1,arg2);
  
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_beep_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  beep_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (beep_t)jarg1; 
  beep(arg1);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_beep_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  beep();
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_askbuttons_1cv(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jint jarg4, jstring jarg5, jlong jarg6) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  va_list arg6 ;
  va_list *argp6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  argp6 = *(va_list **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null va_list");
    return 0;
  }
  arg6 = *argp6; 
  result = (int)askbuttons_cv((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4,(char const *)arg5,arg6);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_askfile_1cv(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jlong jarg4) {
  jstring jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(va_list **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null va_list");
    return 0;
  }
  arg4 = *argp4; 
  result = (char *)askfile_cv(arg1,(char const *)arg2,(char const *)arg3,arg4);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_ask_1for_1feedback(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  ask_for_feedback((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_askident(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)askident((char const *)arg1,(char const *)arg2,arg3);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_askseg(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  sel_t *arg1 = (sel_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sel_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)askseg(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_asklong(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  sval_t *arg1 = (sval_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sval_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)asklong(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_vaskstr(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jlong jarg4) {
  jstring jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(va_list **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null va_list");
    return 0;
  }
  arg4 = *argp4; 
  result = (char *)vaskstr(arg1,(char const *)arg2,(char const *)arg3,arg4);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_vasktext(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5) {
  jstring jresult = 0 ;
  size_t arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  va_list arg5 ;
  va_list *argp5 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  argp5 = *(va_list **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null va_list");
    return 0;
  }
  arg5 = *argp5; 
  result = (char *)vasktext(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_vwarning(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  va_list *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  argp2 = *(va_list **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null va_list");
    return ;
  }
  arg2 = *argp2; 
  vwarning((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_vinfo(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  va_list *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  argp2 = *(va_list **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null va_list");
    return ;
  }
  arg2 = *argp2; 
  vinfo((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_vnomem(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  va_list *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  argp2 = *(va_list **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null va_list");
    return ;
  }
  arg2 = *argp2; 
  vnomem((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_vmsg(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  va_list *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(va_list **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null va_list");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)vmsg((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_display_1copyright_1warning(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)display_copyright_warning();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_set_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (bool)set_xml((char const *)arg1,(char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_batch_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  batch = arg1;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_batch_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)batch;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_errorexit_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  errorexit = arg1;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_errorexit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)errorexit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_error(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  error((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_warning(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  warning((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_info(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  info((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_nomem(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  nomem((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_msg(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (int)msg((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_askyn_1cv(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  va_list arg3 ;
  va_list *argp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  argp3 = *(va_list **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null va_list");
    return 0;
  }
  arg3 = *argp3; 
  result = (int)askyn_cv(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_askyn_1c(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)askyn_c(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_askbuttons_1c(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jint jarg4, jstring jarg5) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  void *arg6 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (int)askbuttons_c((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4,(char const *)arg5,arg6);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_askstr(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (char *)askstr(arg1,(char const *)arg2,(char const *)arg3,arg4);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_askfile_1c(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (char *)askfile_c(arg1,(char const *)arg2,(char const *)arg3,arg4);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_enumerate_1files(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  enumerate_files_cb arg5 = (enumerate_files_cb) 0 ;
  void *arg6 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = *(enumerate_files_cb *)&jarg5; 
  arg6 = *(void **)&jarg6; 
  result = (int)enumerate_files(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_enumerate_1system_1files(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  enumerate_files_cb arg5 = (enumerate_files_cb) 0 ;
  void *arg6 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = *(enumerate_files_cb *)&jarg5; 
  arg6 = *(void **)&jarg6; 
  result = (int)enumerate_system_files(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_idadir(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (char *)idadir((char const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_getsysfile(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3, jstring jarg4) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (char *)getsysfile(arg1,arg2,(char const *)arg3,(char const *)arg4);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_get_1user_1idadir(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)get_user_idadir();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_fopenWT(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  FILE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (FILE *)fopenWT((char const *)arg1);
  *(FILE **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_fopenWB(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  FILE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (FILE *)fopenWB((char const *)arg1);
  *(FILE **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_fopenRT(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  FILE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (FILE *)fopenRT((char const *)arg1);
  *(FILE **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_fopenRB(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  FILE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (FILE *)fopenRB((char const *)arg1);
  *(FILE **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_fopenM(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  FILE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (FILE *)fopenM((char const *)arg1);
  *(FILE **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_fopenA(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  FILE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (FILE *)fopenA((char const *)arg1);
  *(FILE **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_openR(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  FILE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (FILE *)openR((char const *)arg1);
  *(FILE **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_openRT(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  FILE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (FILE *)openRT((char const *)arg1);
  *(FILE **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_openM(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  FILE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (FILE *)openM((char const *)arg1);
  *(FILE **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_ecreate(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  FILE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (FILE *)ecreate((char const *)arg1);
  *(FILE **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_ecreateT(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  FILE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (FILE *)ecreateT((char const *)arg1);
  *(FILE **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_eclose(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FILE *arg1 = (FILE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  eclose(arg1);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_eread(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  FILE *arg1 = (FILE *) 0 ;
  void *arg2 = (void *) 0 ;
  ssize_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (ssize_t)jarg3; 
  eread(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_ewrite(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  FILE *arg1 = (FILE *) 0 ;
  void *arg2 = (void *) 0 ;
  ssize_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (ssize_t)jarg3; 
  ewrite(arg1,(void const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_eseek(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  FILE *arg1 = (FILE *) 0 ;
  int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = (int32)jarg2; 
  eseek(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_efilelength(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  uint32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  result = (uint32)efilelength(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_echsize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  FILE *arg1 = (FILE *) 0 ;
  uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = (uint32)jarg2; 
  echsize(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_getdspace(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  uint64 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = getdspace((char const *)arg1);
  *(uint64 **)&jresult = new uint64((const uint64 &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_ioport_1bit_1t_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ioport_bit_t *arg1 = (ioport_bit_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ioport_bit_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->name) delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_ioport_1bit_1t_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ioport_bit_t *arg1 = (ioport_bit_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ioport_bit_t **)&jarg1; 
  result = (char *) ((arg1)->name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_ioport_1bit_1t_1cmt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ioport_bit_t *arg1 = (ioport_bit_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ioport_bit_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->cmt) delete [] arg1->cmt;
    if (arg2) {
      arg1->cmt = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->cmt, (const char *)arg2);
    } else {
      arg1->cmt = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_ioport_1bit_1t_1cmt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ioport_bit_t *arg1 = (ioport_bit_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ioport_bit_t **)&jarg1; 
  result = (char *) ((arg1)->cmt);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_new_1ioport_1bit_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ioport_bit_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ioport_bit_t *)new ioport_bit_t();
  *(ioport_bit_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_delete_1ioport_1bit_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ioport_bit_t *arg1 = (ioport_bit_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ioport_bit_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_ioport_1t_1address_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ioport_t *arg1 = (ioport_t *) 0 ;
  ea_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ioport_t **)&jarg1; 
  arg2 = (ea_t)jarg2; 
  if (arg1) (arg1)->address = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_ioport_1t_1address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ioport_t *arg1 = (ioport_t *) 0 ;
  ea_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ioport_t **)&jarg1; 
  result = (ea_t) ((arg1)->address);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_ioport_1t_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ioport_t *arg1 = (ioport_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ioport_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->name) delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_ioport_1t_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ioport_t *arg1 = (ioport_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ioport_t **)&jarg1; 
  result = (char *) ((arg1)->name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_ioport_1t_1cmt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ioport_t *arg1 = (ioport_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ioport_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->cmt) delete [] arg1->cmt;
    if (arg2) {
      arg1->cmt = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->cmt, (const char *)arg2);
    } else {
      arg1->cmt = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_ioport_1t_1cmt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ioport_t *arg1 = (ioport_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ioport_t **)&jarg1; 
  result = (char *) ((arg1)->cmt);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_ioport_1t_1bits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ioport_t *arg1 = (ioport_t *) 0 ;
  ioport_bits_t *arg2 = (ioport_bits_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ioport_t **)&jarg1; 
  arg2 = *(ioport_bits_t **)&jarg2; 
  if (arg1) (arg1)->bits = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_ioport_1t_1bits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ioport_t *arg1 = (ioport_t *) 0 ;
  ioport_bits_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ioport_t **)&jarg1; 
  result = (ioport_bits_t *) ((arg1)->bits);
  *(ioport_bits_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_ioport_1t_1userdata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ioport_t *arg1 = (ioport_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ioport_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->userdata = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_ioport_1t_1userdata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ioport_t *arg1 = (ioport_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ioport_t **)&jarg1; 
  result = (void *) ((arg1)->userdata);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_new_1ioport_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ioport_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ioport_t *)new ioport_t();
  *(ioport_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_delete_1ioport_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ioport_t *arg1 = (ioport_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ioport_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_find_1ioport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  ioport_t *arg1 = (ioport_t *) 0 ;
  size_t arg2 ;
  ea_t arg3 ;
  ioport_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ioport_t **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (ea_t)jarg3; 
  result = (ioport_t *)find_ioport((ioport_t const *)arg1,arg2,arg3);
  *(ioport_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_find_1ioport_1bit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  ioport_t *arg1 = (ioport_t *) 0 ;
  size_t arg2 ;
  ea_t arg3 ;
  size_t arg4 ;
  ioport_bit_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ioport_t **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (ea_t)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (ioport_bit_t *)find_ioport_bit((ioport_t const *)arg1,arg2,arg3,arg4);
  *(ioport_bit_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_free_1ioports(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ioport_t *arg1 = (ioport_t *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ioport_t **)&jarg1; 
  arg2 = (size_t)jarg2; 
  free_ioports(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_call_1system(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (int)call_system((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_set_1thread_1priority(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  ushort arg1 ;
  int32 arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ushort)jarg1; 
  arg2 = (int32)jarg2; 
  result = (int)set_thread_priority(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_lread(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  linput_t *arg1 = (linput_t *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(linput_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (size_t)jarg3; 
  lread(arg1,arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qlread(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  linput_t *arg1 = (linput_t *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(linput_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (size_t)jarg3; 
  result = (ssize_t)qlread(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qlgets(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  linput_t *arg3 = (linput_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  arg3 = *(linput_t **)&jarg3; 
  result = (char *)qlgets(arg1,arg2,arg3);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qlgetc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  linput_t *arg1 = (linput_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(linput_t **)&jarg1; 
  result = (int)qlgetc(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_lreadbytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jboolean jarg4) {
  jint jresult = 0 ;
  linput_t *arg1 = (linput_t *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(linput_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)lreadbytes(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_lread2bytes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  linput_t *arg1 = (linput_t *) 0 ;
  int16 *arg2 = (int16 *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(linput_t **)&jarg1; 
  arg2 = *(int16 **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)lread2bytes(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_lread2bytes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  linput_t *arg1 = (linput_t *) 0 ;
  uint16 *arg2 = (uint16 *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(linput_t **)&jarg1; 
  arg2 = *(uint16 **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)lread2bytes(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_lread4bytes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  linput_t *arg1 = (linput_t *) 0 ;
  int32 *arg2 = (int32 *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(linput_t **)&jarg1; 
  arg2 = *(int32 **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)lread4bytes(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_lread4bytes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  linput_t *arg1 = (linput_t *) 0 ;
  uint32 *arg2 = (uint32 *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(linput_t **)&jarg1; 
  arg2 = *(uint32 **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)lread4bytes(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_lread8bytes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  linput_t *arg1 = (linput_t *) 0 ;
  int64 *arg2 = (int64 *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(linput_t **)&jarg1; 
  arg2 = *(int64 **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)lread8bytes(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_lread8bytes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  linput_t *arg1 = (linput_t *) 0 ;
  uint64 *arg2 = (uint64 *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(linput_t **)&jarg1; 
  arg2 = *(uint64 **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)lread8bytes(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qlgetz(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3, jlong jarg4) {
  jstring jresult = 0 ;
  linput_t *arg1 = (linput_t *) 0 ;
  int32 arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(linput_t **)&jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (char *)qlgetz(arg1,arg2,arg3,arg4);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qlsize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  linput_t *arg1 = (linput_t *) 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(linput_t **)&jarg1; 
  result = (int32)qlsize(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qlseek_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  linput_t *arg1 = (linput_t *) 0 ;
  int32 arg2 ;
  int arg3 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(linput_t **)&jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (int)jarg3; 
  result = (int32)qlseek(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qlseek_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  linput_t *arg1 = (linput_t *) 0 ;
  int32 arg2 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(linput_t **)&jarg1; 
  arg2 = (int32)jarg2; 
  result = (int32)qlseek(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qltell(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  linput_t *arg1 = (linput_t *) 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(linput_t **)&jarg1; 
  result = (int32)qltell(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_open_1linput(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  linput_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  result = (linput_t *)open_linput((char const *)arg1,arg2);
  *(linput_t **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_close_1linput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  linput_t *arg1 = (linput_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(linput_t **)&jarg1; 
  close_linput(arg1);
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_qlfile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  linput_t *arg1 = (linput_t *) 0 ;
  FILE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(linput_t **)&jarg1; 
  result = (FILE *)qlfile(arg1);
  *(FILE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_make_1linput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  linput_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  result = (linput_t *)make_linput(arg1);
  *(linput_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_unmake_1linput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  linput_t *arg1 = (linput_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(linput_t **)&jarg1; 
  unmake_linput(arg1);
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_generic_1linput_1t_1filesize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  generic_linput_t *arg1 = (generic_linput_t *) 0 ;
  uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(generic_linput_t **)&jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->filesize = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_generic_1linput_1t_1filesize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  generic_linput_t *arg1 = (generic_linput_t *) 0 ;
  uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(generic_linput_t **)&jarg1; 
  result = (uint32) ((arg1)->filesize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_generic_1linput_1t_1blocksize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  generic_linput_t *arg1 = (generic_linput_t *) 0 ;
  uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(generic_linput_t **)&jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->blocksize = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_generic_1linput_1t_1blocksize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  generic_linput_t *arg1 = (generic_linput_t *) 0 ;
  uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(generic_linput_t **)&jarg1; 
  result = (uint32) ((arg1)->blocksize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_generic_1linput_1t_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  generic_linput_t *arg1 = (generic_linput_t *) 0 ;
  off_t arg2 ;
  void *arg3 = (void *) 0 ;
  size_t arg4 ;
  off_t *argp2 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(generic_linput_t **)&jarg1; 
  argp2 = *(off_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null off_t");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (size_t)jarg4; 
  result = (ssize_t)(arg1)->read(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_delete_1generic_1linput_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  generic_linput_t *arg1 = (generic_linput_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(generic_linput_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_create_1generic_1linput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  generic_linput_t *arg1 = (generic_linput_t *) 0 ;
  linput_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(generic_linput_t **)&jarg1; 
  result = (linput_t *)create_generic_linput(arg1);
  *(linput_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_create_1memory_1linput(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  ea_t arg1 ;
  asize_t arg2 ;
  linput_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ea_t)jarg1; 
  arg2 = (asize_t)jarg2; 
  result = (linput_t *)create_memory_linput(arg1,arg2);
  *(linput_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_get_1linput_1type(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  linput_t *arg1 = (linput_t *) 0 ;
  linput_type_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(linput_t **)&jarg1; 
  result = (linput_type_t)get_linput_type(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_getParameter(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (char *)getParameter((char const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_getIdaWindowHandle(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)getIdaWindowHandle();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_initIdaEmbeddedWindow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  TForm *arg1 = (TForm *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TForm **)&jarg1; 
  result = (bool)initIdaEmbeddedWindow(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_getInternalHandle(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)getInternalHandle(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_sayHello(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  sayHello();
}


SWIGEXPORT jstring JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_getIdbPath(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)getIdbPath();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_openDatabase(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)openDatabase(arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_closeDatabase(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  closeDatabase();
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_delete_1IdaMenuItemListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IdaMenuItemListener *arg1 = (IdaMenuItemListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IdaMenuItemListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_IdaMenuItemListener_1actionPerformed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IdaMenuItemListener *arg1 = (IdaMenuItemListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IdaMenuItemListener **)&jarg1; 
  (arg1)->actionPerformed();
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_new_1IdaMenuItemListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IdaMenuItemListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IdaMenuItemListener *)new IdaMenuItemListener();
  *(IdaMenuItemListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_addMenuItem(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  IdaMenuItemListener *arg5 = (IdaMenuItemListener *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = *(IdaMenuItemListener **)&jarg5; 
  result = (bool)addMenuItem((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_reloc_1info_1t_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(bytevec_t **)&baseptr = *(reloc_info_t **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_de_blichmann_idajava_natives_IdaJavaJNI_relobj_1t_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(bytevec_t **)&baseptr = *(relobj_t **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

